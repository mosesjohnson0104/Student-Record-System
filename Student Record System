import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

# Database setup
def init_db():
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            age INTEGER NOT NULL,
            grade TEXT NOT NULL
        )
    """)
    conn.commit()
    conn.close()

# Functions to interact with the database
def add_student():
    name = name_var.get()
    age = age_var.get()
    grade = grade_var.get()
    
    if name and age and grade:
        conn = sqlite3.connect("students.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO students (name, age, grade) VALUES (?, ?, ?)", (name, age, grade))
        conn.commit()
        conn.close()
        load_students()
        clear_inputs()
    else:
        messagebox.showwarning("Input Error", "All fields are required!")

def load_students():
    for row in tree.get_children():
        tree.delete(row)
    
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM students")
    students = cursor.fetchall()
    conn.close()
    
    for student in students:
        tree.insert("", "end", values=student)

def delete_student():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Selection Error", "Select a student to delete!")
        return
    
    student_id = tree.item(selected[0])['values'][0]
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM students WHERE id=?", (student_id,))
    conn.commit()
    conn.close()
    load_students()

def clear_inputs():
    name_var.set("")
    age_var.set("")
    grade_var.set("")

# Initialize database
init_db()

# GUI Setup
root = tk.Tk()
root.title("Student Record System")
root.geometry("500x400")

# Input Fields
name_var = tk.StringVar()
age_var = tk.StringVar()
grade_var = tk.StringVar()

tk.Label(root, text="Name").pack()
tk.Entry(root, textvariable=name_var).pack()
tk.Label(root, text="Age").pack()
tk.Entry(root, textvariable=age_var).pack()
tk.Label(root, text="Grade").pack()
tk.Entry(root, textvariable=grade_var).pack()

# Buttons
tk.Button(root, text="Add Student", command=add_student).pack()
tk.Button(root, text="Delete Student", command=delete_student).pack()

# Student List
tree = ttk.Treeview(root, columns=("ID", "Name", "Age", "Grade"), show="headings")
tree.heading("ID", text="ID")
tree.heading("Name", text="Name")
tree.heading("Age", text="Age")
tree.heading("Grade", text="Grade")
tree.pack()

load_students()
root.mainloop()
